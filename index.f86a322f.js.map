{"mappings":"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","sources":["src/showStatus.ts","src/fetchWikitext.ts","src/fetchLangLink.ts","src/googleTranslate.ts","src/convertWikilink.ts","src/main.ts"],"sourcesContent":["export default function(message: string): void {\n  (document.querySelector('#status') as HTMLParagraphElement).textContent = message\n}","import showStatus from \"./showStatus\";\n\nasync function fetchWikitext(articleName: string): Promise<string|null> {\n    /**\n     * parse.js\n     *\n     * MediaWiki API Demos\n     * Demo of `Parse` module: Parse content of a page\n     *\n     * MIT License\n     */\n\n    showStatus(`Loading \"${articleName}\" article text...`)\n\n    const url = \"https://en.wikipedia.org/w/api.php?\" +\n        new URLSearchParams({\n            origin: \"*\",\n            action: \"parse\",\n            page: articleName,\n            format: \"json\",\n            prop: 'wikitext',\n        });\n\n    const req = await fetch(url);\n    const json = await req.json();\n    if (!json.parse) {\n        showStatus(`Could not load \"${articleName}\"`)\n        return null;\n    }\n    const wikitext = json.parse.wikitext[\"*\"];\n\n    const redirectArticleName = getRedirect(wikitext)\n    if (redirectArticleName !== null) {\n        return fetchWikitext(redirectArticleName)\n    }\n    showStatus('')\n    return wikitext\n}\n\nfunction getRedirect(wikitext: string) {\n    const match = /#REDIRECT.+\\[\\[(.+)]]/.exec(wikitext)\n    if (match !== null) {\n        return match[1]\n    }\n    return null\n}\n\nexport default fetchWikitext;","async function fetchLangLink(articleName: string): Promise<string|null> {\n    /*\n        langlinks.js\n        MediaWiki API Demos\n        Demo of `Langlinks` module: Get a list of language links that a given page has\n        MIT License\n    */\n\n    if (articleName in localStorage) {\n        const langlink = localStorage.getItem(articleName) as string;\n        if (langlink === '') {\n            return null;\n        }\n        return langlink;\n    }\n\n    const params = {\n        format: \"json\",\n        action: \"query\",\n        titles: articleName,\n        prop: \"langlinks\",\n        lllang: \"ja\",\n        origin: '*',\n    };\n\n    let url = \"https://en.wikipedia.org/w/api.php?\";\n    Object.keys(params).forEach(function (key) {\n        // @ts-ignore\n        url += \"&\" + key + \"=\" + params[key];\n    });\n\n\n    const req = await fetch(url);\n    const json = await req.json();\n    if (!('query' in json) || !('pages' in json.query)) {\n        localStorage.setItem(articleName, '');\n        return null;\n    }\n    const pageID = parseInt(Object.keys(json.query.pages)[0]);\n    const langlinks = json.query.pages[pageID].langlinks;\n    if (!langlinks) {\n        localStorage.setItem(articleName, '');\n        return null;\n    }\n\n    const langlink = langlinks[0]['*'];\n    localStorage.setItem(articleName, langlink);\n\n    return langlink;\n}\n\nexport default fetchLangLink;","const apiKey = 'AIzaSyAew5zvKW6uGLqj_xVwIXd1ZJdByKHBY9I'\n\nexport default async function (text: string) {\n  const data = {\n    q: text,\n    source: 'en',\n    target: 'ja',\n    format: 'text',\n  };\n  const res = await fetch(`https://translation.googleapis.com/language/translate/v2?key=${apiKey}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  return (await res.json()).data.translations[0].translatedText;\n}\n","import fetchLangLink from \"./fetchLangLink\";\nimport showStatus from \"./showStatus\";\nimport googleTranslate from \"./googleTranslate\";\n\nfunction findWikiLinks(wikitext: string) {\n    let wikiLinkSet = new Set([...wikitext.matchAll(/\\[\\[(.+?)]]/g)].map(m => m[1])).keys();\n    return [...wikiLinkSet]\n      .filter(link => !link.startsWith('File:'))\n      .map(link => link.split('|'))\n      .filter(s => s.length <= 2);\n}\n\nexport async function convertWikilink(wikitext: string) {\n    let replacedWikitext = wikitext\n    const links = findWikiLinks(wikitext);\n    for (const [articleName, label] of links) {\n        showStatus(`Converting \"${articleName}\"...`)\n\n        const langlink = await fetchLangLink(articleName)\n        const targetRegex = new RegExp(String.raw`\\[\\[${articleName}${label ? `|${label}` : ''}]]`, 'g');\n        let newWikiLink: string;\n        if (langlink === null) {\n            const translatedArticleName = await googleTranslate(articleName);\n            newWikiLink = `{{ill|${translatedArticleName}|en|${articleName}${label ? `|label=${label}` : ''}}}`;\n        } else {\n            newWikiLink = `[[${langlink}${label ? `|${label}` : ''}]]`;\n        }\n        replacedWikitext = replacedWikitext.replace(targetRegex, newWikiLink);\n    }\n\n    showStatus('');\n\n    return replacedWikitext\n}\n","import fetchWikitext from \"./fetchWikitext\";\nimport fetchLangLink from './fetchLangLink'\nimport {convertWikilink} from \"./convertWikilink\";\n\nasync function fetchArticleHandler() {\n    const articleName = (document.querySelector('#article-name') as HTMLInputElement).value;\n\n    const langLink = await fetchLangLink(articleName);\n    (document.querySelector('#langlink') as HTMLTextAreaElement).value\n      = `${articleName} => ${langLink ?? 'not found'}`;\n\n    const wikitext = await fetchWikitext(articleName);\n    (document.querySelector('#wikitext') as HTMLTextAreaElement).value\n      = wikitext ?? 'not found';\n\n    if (wikitext === null) {\n        return;\n    }\n}\n\nasync function convertWikilinkHandler() {\n    const wikitext = (document.querySelector('#wikitext') as HTMLTextAreaElement).value\n    const convertedWikitext = await convertWikilink(wikitext);\n    (document.querySelector('#replaced-wikitext') as HTMLTextAreaElement).value = convertedWikitext\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const articleNameInput = document.querySelector('#article-name') as HTMLInputElement;\n    articleNameInput.addEventListener('keydown', (e: KeyboardEvent)  => {\n        if (e.key !== 'Enter') {\n            return\n        }\n        fetchArticleHandler()\n    });\n\n    const fetchButton = document.querySelector('button#fetch') as HTMLInputElement;\n    fetchButton.addEventListener('click', fetchArticleHandler);\n\n    const convertButton = document.querySelector('button#convert') as HTMLInputElement;\n    convertButton.addEventListener('click', convertWikilinkHandler);\n})\n"],"names":["message","document","querySelector","textContent","$8f2b31e5f3e0b919$export$2e2bcd8739ae039","$8f2b31e5f3e0b919$var$fetchWikitext","articleName","$fd396f6c3bdd2fee$export$2e2bcd8739ae039","url","URLSearchParams","origin","action","page","format","prop","req","fetch","json","parse","wikitext","redirectArticleName","match","exec","$8f2b31e5f3e0b919$var$getRedirect","$2a6f5bf21508368c$export$2e2bcd8739ae039","localStorage","langlink","getItem","params","titles","lllang","Object","keys","forEach","key","query","setItem","pageID","parseInt","pages","langlinks","text","data","q","source","target","res","method","headers","body","JSON","stringify","translations","translatedText","$dd0b997638ff62b6$export$91f540d00ee83002","replacedWikitext","links","Set","matchAll","map","m","filter","link","startsWith","split","s","length","$dd0b997638ff62b6$var$findWikiLinks","label","targetRegex","RegExp","String","raw","newWikiLink","$9f12a29dcf2784d1$export$2e2bcd8739ae039","replace","$5ba171b4a505aeb2$var$fetchArticleHandler","value","langLink","$5ba171b4a505aeb2$var$convertWikilinkHandler","convertedWikitext","addEventListener","e"],"version":3,"file":"index.f86a322f.js.map"}