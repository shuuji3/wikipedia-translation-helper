{"mappings":"IAyCAA,iBAzCeC,EAAcC,GAUzB,MAAMC,EAAM,sCACR,IAAIC,gBAAgB,CAChBC,OAAQ,IACRC,OAAQ,QACRC,KAAML,EACNM,OAAQ,OACRC,KAAM,aAGRC,QAAYC,MAAMR,GAClBS,QAAaF,EAAIE,OACvB,IAAKA,EAAKC,MACN,OAAO,KAEX,MAAMC,EAAWF,EAAKC,MAAMC,SAAS,KAE/BC,WAOWD,GACjB,MAAME,EAAK,wBAA2BC,KAAKH,GAC3C,OAAc,OAAVE,EACOA,EAAM,GAEV,KAZqBE,CAAYJ,GACxC,OAA4B,OAAxBC,EACOd,EAAcc,GAElBD,OCoBXK,iBAlD6BjB,GAQzB,GAAIA,KAAekB,aAAc,CAC7B,MAAMC,EAAWD,aAAaE,QAAQpB,GACtC,MAAiB,KAAbmB,EACO,KAEJA,EAGX,MAAME,EAAS,CACXjB,OAAQ,QACRkB,OAAQtB,EACRO,KAAM,YACND,OAAQ,OACRiB,OAAQ,MAGZ,IAAItB,EAAM,8CACVuB,OAAOC,KAAKJ,GAAQK,SAAQ,SAAUC,GAElC1B,GAAO,IAAM0B,EAAM,IAAMN,EAAOM,MAIpC,MAAMnB,QAAYC,MAAMR,GAClBS,QAAaF,EAAIE,OACvB,KAAM,UAAWA,EAAKkB,OAElB,OADAV,aAAaW,QAAQ7B,EAAa,IAC3B,KAEX,MAAM8B,EAASC,SAASP,OAAOC,KAAKf,EAAKkB,MAAMI,OAAO,IAChDC,EAAYvB,EAAKkB,MAAMI,MAAMF,GAAQG,UAC3C,IAAKA,EAED,OADAf,aAAaW,QAAQ7B,EAAa,IAC3B,KAGX,MAAMmB,EAAWc,EAAU,GAAG,KAG9B,OAFAf,aAAaW,QAAQ7B,EAAamB,GAE3BA,kBCxCWe,EAAgBtB,GAClC,IAAIuB,EAAmBvB,EACvB,MAAMwB,WAPaxB,GAEnB,MAAO,IADW,IAAIyB,IAAI,IAAIzB,EAAS0B,SAAQ,iBAAkBC,KAAIC,GAAKA,EAAE,MAAKf,QACzDc,KAAIE,GAAQA,EAAKC,MAAM,OAAMC,QAAOC,GAAKA,EAAEC,QAAU,IAK/DC,CAAclC,GAC5B,IAAK,MAAOZ,EAAa+C,KAAUX,EAAO,CACtC,GAAIW,EACA,SAEJ,MAAM5B,QAAiBF,EAAcjB,GAC/BgD,EAAc,IAAIC,OAAOC,OAAOC,GAAG,OAAOnD,MAAiB,KAC3DoD,EACW,OAAbjC,EAAiB,SAAYnB,QAAkBA,MAAc,KAASmB,MAC1EgB,EAAmBA,EAAiBkB,QAAQL,EAAaI,GAG7D,OAAOjB,iBCjBImB,IACX,MAAMtD,EAAeuD,SAASC,cAAc,iBAAsCC,MAE5EC,QAAiBzC,EAAcjB,GACpCuD,SAASC,cAAc,aAAqCC,MAAK,GAC3DzD,QAAkB0D,GAAY,cAErC,MAAM9C,QAAiBd,EAAcE,GACpCuD,SAASC,cAAc,aAAqCC,MACzD7C,GAAY,2BAOL+C,IACX,MAAM/C,EAAY2C,SAASC,cAAc,aAAqCC,MACxEG,QAA0B1B,EAAgBtB,GAC/C2C,SAASC,cAAc,sBAA8CC,MAAQG,EAGlFL,SAASM,iBAAiB,oBAAkB,KACfN,SAASC,cAAc,iBAC/BK,iBAAiB,WAAYC,IAC5B,UAAVA,EAAEnC,KAGN2B,OAGgBC,SAASC,cAAc,gBAC/BK,iBAAiB,QAASP,GAEhBC,SAASC,cAAc,kBAC/BK,iBAAiB,QAASF","sources":["src/fetchWikitext.ts","src/fetchLangLink.ts","src/convertWikilink.ts","src/main.ts"],"sourcesContent":["async function fetchWikitext(articleName: string): Promise<string|null> {\n    /**\n     * parse.js\n     *\n     * MediaWiki API Demos\n     * Demo of `Parse` module: Parse content of a page\n     *\n     * MIT License\n     */\n\n    const url = \"https://en.wikipedia.org/w/api.php?\" +\n        new URLSearchParams({\n            origin: \"*\",\n            action: \"parse\",\n            page: articleName,\n            format: \"json\",\n            prop: 'wikitext',\n        });\n\n    const req = await fetch(url);\n    const json = await req.json();\n    if (!json.parse) {\n        return null;\n    }\n    const wikitext = json.parse.wikitext[\"*\"];\n\n    const redirectArticleName = getRedirect(wikitext)\n    if (redirectArticleName !== null) {\n        return fetchWikitext(redirectArticleName)\n    }\n    return wikitext\n}\n\nfunction getRedirect(wikitext: string) {\n    const match = /#REDIRECT.+\\[\\[(.+)]]/.exec(wikitext)\n    if (match !== null) {\n        return match[1]\n    }\n    return null\n}\n\nexport default fetchWikitext;","async function fetchLangLink(articleName: string): Promise<string|null> {\n    /*\n        langlinks.js\n        MediaWiki API Demos\n        Demo of `Langlinks` module: Get a list of language links that a given page has\n        MIT License\n    */\n\n    if (articleName in localStorage) {\n        const langlink = localStorage.getItem(articleName) as string;\n        if (langlink === '') {\n            return null;\n        }\n        return langlink;\n    }\n\n    const params = {\n        action: \"query\",\n        titles: articleName,\n        prop: \"langlinks\",\n        format: \"json\",\n        lllang: \"ja\",\n    };\n\n    let url = \"https://en.wikipedia.org/w/api.php?origin=*\";\n    Object.keys(params).forEach(function (key) {\n        // @ts-ignore\n        url += \"&\" + key + \"=\" + params[key];\n    });\n\n\n    const req = await fetch(url);\n    const json = await req.json();\n    if (!('pages' in json.query)) {\n        localStorage.setItem(articleName, '');\n        return null;\n    }\n    const pageID = parseInt(Object.keys(json.query.pages)[0]);\n    const langlinks = json.query.pages[pageID].langlinks;\n    if (!langlinks) {\n        localStorage.setItem(articleName, '');\n        return null;\n    }\n\n    const langlink = langlinks[0]['*'];\n    localStorage.setItem(articleName, langlink);\n\n    return langlink;\n}\n\nexport default fetchLangLink;","import fetchLangLink from \"./fetchLangLink\";\n\nfunction findWikiLinks(wikitext: string) {\n    let wikiLinkSet = new Set([...wikitext.matchAll(/\\[\\[(.+?)]]/g)].map(m => m[1])).keys();\n    return [...wikiLinkSet].map(link => link.split('|')).filter(s => s.length <= 2);\n}\n\nexport async function convertWikilink(wikitext: string) {\n    let replacedWikitext = wikitext\n    const links = findWikiLinks(wikitext);\n    for (const [articleName, label] of links) {\n        if (label) {\n            continue;\n        }\n        const langlink = await fetchLangLink(articleName)\n        const targetRegex = new RegExp(String.raw`\\[\\[${articleName}]]`, 'g');\n        const newWikiLink =\n            langlink === null ? `{{ill|${articleName}|en|${articleName}}}` : `[[${langlink}]]`;\n        replacedWikitext = replacedWikitext.replace(targetRegex, newWikiLink);\n    }\n\n    return replacedWikitext\n}","import fetchWikitext from \"./fetchWikitext\";\nimport fetchLangLink from './fetchLangLink'\nimport {convertWikilink} from \"./convertWikilink\";\n\nasync function fetchArticleHandler() {\n    const articleName = (document.querySelector('#article-name') as HTMLInputElement).value;\n\n    const langLink = await fetchLangLink(articleName);\n    (document.querySelector('#langlink') as HTMLTextAreaElement).value\n      = `${articleName} => ${langLink ?? 'not found'}`;\n\n    const wikitext = await fetchWikitext(articleName);\n    (document.querySelector('#wikitext') as HTMLTextAreaElement).value\n      = wikitext ?? 'not found';\n\n    if (wikitext === null) {\n        return;\n    }\n}\n\nasync function convertWikilinkHandler() {\n    const wikitext = (document.querySelector('#wikitext') as HTMLTextAreaElement).value\n    const convertedWikitext = await convertWikilink(wikitext);\n    (document.querySelector('#replaced-wikitext') as HTMLTextAreaElement).value = convertedWikitext\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const articleNameInput = document.querySelector('#article-name') as HTMLInputElement;\n    articleNameInput.addEventListener('keydown', (e: KeyboardEvent)  => {\n        if (e.key !== 'Enter') {\n            return\n        }\n        fetchArticleHandler()\n    });\n\n    const fetchButton = document.querySelector('button#fetch') as HTMLInputElement;\n    fetchButton.addEventListener('click', fetchArticleHandler);\n\n    const convertButton = document.querySelector('button#convert') as HTMLInputElement;\n    convertButton.addEventListener('click', convertWikilinkHandler);\n})\n"],"names":["$8f2b31e5f3e0b919$export$2e2bcd8739ae039","$8f2b31e5f3e0b919$var$fetchWikitext","articleName","url","URLSearchParams","origin","action","page","format","prop","req","fetch","json","parse","wikitext","redirectArticleName","match","exec","$8f2b31e5f3e0b919$var$getRedirect","$2a6f5bf21508368c$export$2e2bcd8739ae039","localStorage","langlink","getItem","params","titles","lllang","Object","keys","forEach","key","query","setItem","pageID","parseInt","pages","langlinks","$dd0b997638ff62b6$export$91f540d00ee83002","replacedWikitext","links","Set","matchAll","map","m","link","split","filter","s","length","$dd0b997638ff62b6$var$findWikiLinks","label","targetRegex","RegExp","String","raw","newWikiLink","replace","$5ba171b4a505aeb2$var$fetchArticleHandler","document","querySelector","value","langLink","$5ba171b4a505aeb2$var$convertWikilinkHandler","convertedWikitext","addEventListener","e"],"version":3,"file":"index.8a941837.js.map"}